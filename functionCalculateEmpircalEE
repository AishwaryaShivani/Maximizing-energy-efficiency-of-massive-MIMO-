%Compute the highest achievable EE by optimizing the power allocation to
%achieve a given SINR per UE (or equally a given gross rate) for a given
%processing scheme and system dimensions.


function EE_value = functionCalculateEmpircalEE(SINR,Ddiag,Doffdiag,circuitpower,prelogFactor,A,prefixPower)


no_Of_MonteCarloRealizations = size(Ddiag,3); %Extract number of Monte Carlo realizations
oneK = ones(size(Ddiag,1),1); %Create the vector 1_K with K ones.

%Placeholder for the sum transmit power in the uplink/downlink
sum_Power = zeros(no_Of_MonteCarloRealizations,1);

%Compute the matrix in D^(ul) in Eq. (9) for a certain SINR per UE.
D = Ddiag/SINR + Doffdiag;

%Go through all Monte Carlo realizations
for itr = 1:no_Of_MonteCarloRealizations
    
    %Compute uplink user powers according to Eq. (8).
    user_Powers = D(:,:,itr)\oneK;
    
    %Check if the SINR is feasible/achievable for all UEs, which is the
    %case if and only if the user powers are all positive.
    if min(user_Powers)>0
        
        %Compute the sum of the uplink user powers. Note that the sum of
        %the downlink powers are the same, due to uplink-downlink duality.
        sum_Power(itr) = sum(user_Powers); 
        
    else
        
        %Assign a negative value when the SINRs are infeasible.
        sum_Power(itr) = -1;
        
        %Stop the process, since one infeasible scenario is sufficient for
        %infeasibility.
        break;
        
    end
    
end


%Check if all the SINR was feasible for Monte Carlo realizations
if min(sum_Power)>0
    
    %Compute the average transmit power
    averagePower = mean(sum_Power);
    
    %Compute the corresponding EE
    EE_value = ( prelogFactor*log2(1+SINR) ) / (  prefixPower*averagePower + circuitpower + A*prelogFactor*log2(1+SINR) ); 
    
else
    
    %Set the EE to zero when the current SINRs are infeasible
    EE_value = 0;
    
end
